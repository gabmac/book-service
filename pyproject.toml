[tool.poetry]
name = "book-service"
version = "0.1.0"
description = ""
authors = ["Gabriel"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.14"
uvicorn = "^0.35.0"
opensearch-py = "^3.0.0"
coverage = {extras = ["toml"], version = "^7.9.2"}
conventional-pre-commit = "^4.2.0"
alembic = "^1.16.2"
psycopg2-binary = "^2.9.10"
sqlmodel = "^0.0.24"
pydantic-settings = "^2.10.1"
setuptools = "^80.9.0"
packaging = "^25.0"
python-logstash-async = "^4.0.2"
pika = "^1.3.2"
aio-pika = "^9.5.5"
dotenv = "^0.9.9"


[tool.poetry.group.code-smells.dependencies]
flake8 = "^7.3.0"
mypy = "^1.16.1"
isort = "^6.0.1"
pre-commit = "^4.2.0"
autoflake = "^2.3.1"
pylint = "^3.3.7"
black = "^25.1.0"
pip-audit = "^2.9.0"
bandit = {extras = ["toml"], version = "^1.8.5"}


[tool.poetry.group.debugpy.dependencies]
debugpy = "^1.8.14"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.src.infrastructure.adapters.entrypoints.api"


[tool.coverage.run]
branch = true
include = [
    "src/infrastructure/adapters/entrypoints/api/routes/*",
    "src/application/usecase/*",
    "src/infrastructure/adapters/database/repositories/*",
]
omit = ["*__.py", "*exception*", "src/application/usecase/usecase.py"]
[tool.coverage.report]
fail_under = 80
sort = "-Cover"

[tool.isort]
profile = "black"
multi_line_output = 3
src_paths = ["src",]

[tool.mypy]
install_types=true
non_interactive=true
disable_error_code = ["abstract"]
exclude = "common|models"
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_return_any = false
warn_unused_ignores = false

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestConfigWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]



[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/alembic"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the exec runner,
# execute a binary
# name = "ruff"
# type = "exec"
# executable = "%(here)s/.venv/bin/ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
