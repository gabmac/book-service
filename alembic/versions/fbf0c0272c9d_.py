"""empty message

Revision ID: fbf0c0272c9d
Revises:
Create Date: 2025-07-13 21:29:13.769395

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlmodel import AutoString

# revision identifiers, used by Alembic.
revision: str = "fbf0c0272c9d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "author",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("name", AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_author_name"), "author", ["name"], unique=False)
    op.create_table(
        "book",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("isbn_code", AutoString(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("editor", AutoString(), nullable=False),
        sa.Column("edition", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("PHYSICAL", "EBOOK", "BOTH", name="booktype"),
            nullable=False,
        ),
        sa.Column("publish_date", sa.Date(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "book_category",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("title", AutoString(), nullable=False),
        sa.Column("description", AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_book_category_title"),
        "book_category",
        ["title"],
        unique=True,
    )
    op.create_table(
        "branch",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("name", AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "author_book_link",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("author_id", sa.Uuid(), nullable=False),
        sa.Column("book_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["author_id"], ["author.id"]),
        sa.ForeignKeyConstraint(["book_id"], ["book.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_author_book_link_author_id"),
        "author_book_link",
        ["author_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_author_book_link_book_id"),
        "author_book_link",
        ["book_id"],
        unique=False,
    )
    op.create_table(
        "book_book_category_link",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("book_id", sa.Uuid(), nullable=False),
        sa.Column("book_category_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["book_category_id"], ["book_category.id"]),
        sa.ForeignKeyConstraint(["book_id"], ["book.id"]),
        sa.PrimaryKeyConstraint("id", "book_id", "book_category_id"),
    )
    op.create_index(
        op.f("ix_book_book_category_link_book_category_id"),
        "book_book_category_link",
        ["book_category_id"],
        unique=False,
    )
    op.create_table(
        "book_data",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("language", AutoString(), nullable=False),
        sa.Column("summary", AutoString(), nullable=True),
        sa.Column("title", AutoString(), nullable=False),
        sa.Column("book_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["book_id"], ["book.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_book_data_title"), "book_data", ["title"], unique=False)
    op.execute(
        """
            CREATE TABLE physical_exemplar (
            id UUID NOT NULL,
            branch_id UUID NOT NULL,
            version INTEGER NOT NULL,
            created_at TIMESTAMPTZ NOT NULL,
            created_by TEXT NOT NULL,
            updated_at TIMESTAMPTZ NOT NULL,
            updated_by TEXT NOT NULL,
            available BOOLEAN NOT NULL,
            room INTEGER NOT NULL,
            floor INTEGER NOT NULL,
            bookshelf INTEGER NOT NULL,
            book_id UUID,

            PRIMARY KEY (id, branch_id),
            CONSTRAINT fk_book FOREIGN KEY (book_id) REFERENCES book(id),
            CONSTRAINT fk_branch FOREIGN KEY (branch_id) REFERENCES branch(id)
        ) PARTITION BY LIST (branch_id);
        """,
    )
    op.create_index(
        op.f("ix_physical_exemplar_book_id"),
        "physical_exemplar",
        ["book_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_physical_exemplar_branch_id"),
        "physical_exemplar",
        ["branch_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_physical_exemplar_branch_id"),
        table_name="physical_exemplar",
    )
    op.drop_index(op.f("ix_physical_exemplar_book_id"), table_name="physical_exemplar")
    op.drop_table("physical_exemplar")
    op.drop_index(op.f("ix_book_data_title"), table_name="book_data")
    op.drop_table("book_data")
    op.drop_index(
        op.f("ix_book_book_category_link_book_category_id"),
        table_name="book_book_category_link",
    )
    op.drop_table("book_book_category_link")
    op.drop_index(op.f("ix_author_book_link_book_id"), table_name="author_book_link")
    op.drop_index(op.f("ix_author_book_link_author_id"), table_name="author_book_link")
    op.drop_table("author_book_link")
    op.drop_table("branch")
    op.drop_index(op.f("ix_book_category_title"), table_name="book_category")
    op.drop_table("book_category")
    op.drop_table("book")
    op.drop_index(op.f("ix_author_name"), table_name="author")
    op.drop_table("author")
    # ### end Alembic commands ###
