"""empty message

Revision ID: 28ad4b3e8ac4
Revises:
Create Date: 2025-07-07 19:54:48.901523

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlmodel.sql.sqltypes import AutoString

# revision identifiers, used by Alembic.
revision: str = "28ad4b3e8ac4"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "author",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("name", AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_author_name"), "author", ["name"], unique=False)
    op.create_table(
        "book",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("isbn_code", AutoString(), nullable=False),
        sa.Column("editor", AutoString(), nullable=False),
        sa.Column("edition", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("PHYSICAL", "EBOOK", "BOTH", name="booktype"),
            nullable=False,
        ),
        sa.Column("publish_date", sa.Date(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "book_category",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("title", AutoString(), nullable=False),
        sa.Column("description", AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_book_category_title"),
        "book_category",
        ["title"],
        unique=False,
    )
    op.create_table(
        "branch",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("name", AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "author_book_link",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("author_id", sa.Uuid(), nullable=False),
        sa.Column("book_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["author_id"], ["author.id"]),
        sa.ForeignKeyConstraint(["book_id"], ["book.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_author_book_link_author_id"),
        "author_book_link",
        ["author_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_author_book_link_book_id"),
        "author_book_link",
        ["book_id"],
        unique=False,
    )
    op.create_table(
        "book_book_category_link",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("book_id", sa.Uuid(), nullable=False),
        sa.Column("book_category_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["book_category_id"], ["book_category.id"]),
        sa.ForeignKeyConstraint(["book_id"], ["book.id"]),
        sa.PrimaryKeyConstraint("id", "book_id", "book_category_id"),
    )
    op.create_index(
        op.f("ix_book_book_category_link_book_category_id"),
        "book_book_category_link",
        ["book_category_id"],
        unique=False,
    )
    op.create_table(
        "book_data",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", AutoString(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", AutoString(), nullable=False),
        sa.Column("language", AutoString(), nullable=False),
        sa.Column("summary", AutoString(), nullable=True),
        sa.Column("title", AutoString(), nullable=False),
        sa.Column("book_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["book_id"], ["book.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute(
        """
    CREATE TABLE physical_exemplar (
    id UUID NOT NULL,
    branch_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL,
    created_by TEXT NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL,
    updated_by TEXT NOT NULL,
    available BOOLEAN NOT NULL,
    room INTEGER NOT NULL,
    floor INTEGER NOT NULL,
    bookshelf INTEGER NOT NULL,
    book_id UUID,

    PRIMARY KEY (id, branch_id),
    CONSTRAINT fk_book FOREIGN KEY (book_id) REFERENCES book(id),
    CONSTRAINT fk_branch FOREIGN KEY (branch_id) REFERENCES branch(id)
) PARTITION BY LIST (branch_id);


-- Create 10 partitions
CREATE TABLE physical_exemplar_branch_1 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000001');
CREATE TABLE physical_exemplar_branch_2 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000002');
CREATE TABLE physical_exemplar_branch_3 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000003');
CREATE TABLE physical_exemplar_branch_4 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000004');
CREATE TABLE physical_exemplar_branch_5 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000005');
CREATE TABLE physical_exemplar_branch_6 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000006');
CREATE TABLE physical_exemplar_branch_7 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000007');
CREATE TABLE physical_exemplar_branch_8 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000008');
CREATE TABLE physical_exemplar_branch_9 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000009');
CREATE TABLE physical_exemplar_branch_10 PARTITION OF physical_exemplar
    FOR VALUES IN ('00000000-0000-0000-0000-000000000010');

-- Insert 10 branches
INSERT INTO branch (id, name, created_at, created_by, updated_at, updated_by)
VALUES
('00000000-0000-0000-0000-000000000001', 'Branch 1', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000002', 'Branch 2', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000003', 'Branch 3', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000004', 'Branch 4', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000005', 'Branch 5', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000006', 'Branch 6', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000007', 'Branch 7', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000008', 'Branch 8', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000009', 'Branch 9', NOW(), 'system', NOW(), 'system'),
('00000000-0000-0000-0000-000000000010', 'Branch 10', NOW(), 'system', NOW(), 'system');
""",
    )
    op.create_index(op.f("ix_book_data_title"), "book_data", ["title"], unique=False)
    op.create_index(
        op.f("ix_physical_exemplar_book_id"),
        "physical_exemplar",
        ["book_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_physical_exemplar_branch_id"),
        "physical_exemplar",
        ["branch_id"],
        unique=False,
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_physical_exemplar_branch_id"),
        table_name="physical_exemplar",
    )
    op.drop_index(op.f("ix_physical_exemplar_book_id"), table_name="physical_exemplar")
    op.drop_table("physical_exemplar")
    op.drop_index(op.f("ix_book_data_title"), table_name="book_data")
    op.drop_table("book_data")
    op.drop_index(
        op.f("ix_book_book_category_link_book_category_id"),
        table_name="book_book_category_link",
    )
    op.drop_table("book_book_category_link")
    op.drop_index(op.f("ix_author_book_link_book_id"), table_name="author_book_link")
    op.drop_index(op.f("ix_author_book_link_author_id"), table_name="author_book_link")
    op.drop_table("author_book_link")
    op.drop_table("branch")
    op.drop_index(op.f("ix_book_category_title"), table_name="book_category")
    op.drop_table("book_category")
    op.drop_table("book")
    op.drop_index(op.f("ix_author_name"), table_name="author")
    op.drop_table("author")
    # ### end Alembic commands ###
