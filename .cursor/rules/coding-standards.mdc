description:
globs:
alwaysApply: true
---
# Clean Code Standards

## Code Organization Principles
- **Single Responsibility**: Each class/function has one reason to change
- **Open/Closed**: Open for extension, closed for modification
- **Dependency Inversion**: Depend on abstractions, not concretions
- **Interface Segregation**: Keep interfaces focused and cohesive

## Naming Conventions
- **Classes**: PascalCase (e.g., `ShortenedUrlEntity`, `CreateShortUrlUseCase`)
- **Functions/Methods**: snake_case (e.g., `create_short_url`, `execute`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `ENVIRONMENT`, `HOST`)
- **Files**: snake_case (e.g., `url_entity.py`, `create_short_url_usecase.py`)
- **Packages**: snake_case (e.g., `short_url`, `usecase`)

## Import Organization
- Group imports: standard library, third-party, local
- Use absolute imports for project modules
- Keep imports at the top of the file
- Example:
```python
from datetime import datetime
from typing import Type

from pydantic import Field

from system.domain.entities.url_entity import ShortenedUrlEntity
```

## Code Structure Patterns
- **Entities**: Represent domain concepts with clear identity
- **Value Objects**: Immutable objects representing values
- **Services**: Stateless operations on domain objects
- **Repositories**: Abstract data access with clear interfaces
- **Use Cases**: Orchestrate business operations

## Documentation Standards
- Use docstrings for all public classes and methods
- Document the "why" not just the "what"
- Include examples for complex operations
- Keep documentation close to the code

## Error Handling Patterns
- Use custom exceptions for domain-specific errors
- Handle exceptions at the appropriate layer
- Provide meaningful error messages
- Log errors with proper context
